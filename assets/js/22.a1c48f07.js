(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{501:function(t,a,e){"use strict";e.r(a);var v=e(4),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),e("h3",{attrs:{id:"是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么?")]),t._v(" "),e("ul",[e("li",[t._v("数据的命名存储")]),t._v(" "),e("li",[t._v("存储数据的临时空间")])]),t._v(" "),e("h3",{attrs:{id:"命名规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名规则"}},[t._v("#")]),t._v(" 命名规则")]),t._v(" "),e("ul",[e("li",[t._v("由字母,数字,下划线,美元符组成,"),e("font",{attrs:{color:"red"}},[t._v(" 且数字不能开头 ")])],1),t._v(" "),e("li",[t._v("非拉丁字母和象形文字也是允许的(例如中文)，但通常不会使用")])]),t._v(" "),e("h3",{attrs:{id:"声明方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明方式"}},[t._v("#")]),t._v(" 声明方式")]),t._v(" "),e("ul",[e("li",[t._v("let(拥有作用域的概念)")]),t._v(" "),e("li",[t._v("var(旧时的声明方式没有作用域的概念)")]),t._v(" "),e("li",[t._v("const(用于声明常量)"),e("br"),t._v(" "),e("font",{attrs:{color:"red"}},[t._v(" 注:在非严格模式下,变量不声明也可以直接使用,极度不推荐!!! ")])],1)]),t._v(" "),e("h3",{attrs:{id:"命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名规范"}},[t._v("#")]),t._v(" 命名规范")]),t._v(" "),e("p",[e("strong",[t._v("正确的变量命名")]),e("br"),t._v("\n一个变量名应该有一个清晰、明显的含义，对其存储的数据进行描述。")]),t._v(" "),e("ul",[e("li",[t._v("使用易读的命名，比如 "),e("code",[t._v("userName")]),t._v(" 或者 "),e("code",[t._v("shoppingCart")]),t._v("。")]),t._v(" "),e("li",[t._v("离诸如 "),e("code",[t._v("a")]),t._v("、"),e("code",[t._v("b")]),t._v("、"),e("code",[t._v("c")]),t._v(" 这种缩写和短名称远一点，除非你真的知道你在干什么。")]),t._v(" "),e("li",[t._v("变量名在能够准确描述变量的同时要足够简洁。不好的例子就是 "),e("code",[t._v("data")]),t._v(" 和 "),e("code",[t._v("value")]),t._v("，这样的名称等于什么都没说。如果能够非常明显地从上下文知道数据和值所表达的含义，这样使用它们也是可以的。(包括currentValue,currentIndex等都不具有实际意义)")]),t._v(" "),e("li",[t._v("脑海中的术语要和团队保持一致。如果网站的访客称为“用户”，则我们采用相关的变量命名，比如 "),e("code",[t._v("currentUser")]),t._v(" 或者 "),e("code",[t._v("newUser")]),t._v("，而不要使用 "),e("code",[t._v("currentVisitor")]),t._v(" 或者一个 "),e("code",[t._v("newManInTown")]),t._v("。")]),t._v(" "),e("li",[t._v("不要重用没有任何关系的变量,现代的 JavaScript 压缩器和浏览器都能够很好地对代码进行优化，所以不会产生性能问题。为不同的值使用不同的变量可以帮助引擎对代码进行优化。")])]),t._v(" "),e("p",[e("strong",[t._v("常量的命名")])]),t._v(" "),e("ul",[e("li",[t._v("通常用大写字母表示“硬编码（hard-coded）”的常量。或者，换句话说就是，当值在执行之前或在被写入代码的时候，我们就知道值是什么了。(例如一些十六进制的颜色表示为了方便可以定义为常量)")]),t._v(" "),e("li",[t._v("需要计算得到的常量(代码执行后),虽然它的值也不会在改变,(但也应该用小写) 例如获取网页加载时间,虽然加载完后不会改变,但在加载之前是个未知的值"),e("br"),t._v("\n参考:"),e("a",{attrs:{href:"https://zh.javascript.info/variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("变量"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("p",[t._v("js种包含8种数据类型")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("number")]),t._v("— 可以是浮点数,也可以是整数,取值范围(±2^53),包含NAN,infinty特殊值")]),t._v(" "),e("li",[e("code",[t._v("bigint")]),t._v("— 用于任意长度的整数，可表示超出number取值范围的数")]),t._v(" "),e("li",[e("code",[t._v("string")]),t._v("— 字符串类型,表示形式由单引号(''),双引号(\" \"),反引号(``扩张功能符)")]),t._v(" "),e("li",[e("code",[t._v("boolean")]),t._v("— 逻辑值,只有true/false两个值")]),t._v(" "),e("li",[e("code",[t._v("null")]),t._v("— 具有单个值null,也是一种数据类型,表示空")]),t._v(" "),e("li",[e("code",[t._v("undefined")]),t._v("— 具有单个值undefined,也是一种数据类型,表示未定义")]),t._v(" "),e("li",[e("code",[t._v("object")]),t._v(" 和 "),e("code",[t._v("symbol")]),t._v(" — 引用数据类型,对于复杂的数据结构和唯一标识符")])]),t._v(" "),e("p",[e("strong",[t._v("通过typeof检测数据类型的注意点")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是JS的语言设计错误,null的类型就是null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数被特殊对待,但实际上它的数据类型为Object")]),t._v("\n")])])]),e("p",[t._v("参考:"),e("a",{attrs:{href:"https://zh.javascript.info/types",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据类型"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"类型转化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转化"}},[t._v("#")]),t._v(" 类型转化")]),t._v(" "),e("h3",{attrs:{id:"字符串类型转化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型转化"}},[t._v("#")]),t._v(" 字符串类型转化")]),t._v(" "),e("p",[t._v("隐式转化:通过"),e("code",[t._v("alert")]),t._v(" "),e("code",[t._v("input")]),t._v("等输出的值会自动转化为"),e("code",[t._v("string")]),t._v("类型"),e("br"),t._v("\n也可以通过String()进行强制类型转化")]),t._v(" "),e("h3",{attrs:{id:"number类型转化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number类型转化"}},[t._v("#")]),t._v(" Number类型转化")]),t._v(" "),e("p",[t._v("隐式转化:在进行算术运算时会进行隐式的"),e("code",[t._v("number")]),t._v("类型转化,若是"),e("code",[t._v("+")]),t._v("运算符,注意字符串拼接(+会优先选择字符串拼接)\n也可以通过Number()进行强制类型转化,若转化失败则会转化为"),e("code",[t._v("NAN")]),e("br"),t._v("\n转化规则:"),e("code",[t._v("null:0")]),t._v(","),e("code",[t._v("undefined:NAN")]),t._v(","),e("code",[t._v("true/false:1 :0")]),t._v(",空串为0")]),t._v(" "),e("h3",{attrs:{id:"boolean类型转化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boolean类型转化"}},[t._v("#")]),t._v(" boolean类型转化")]),t._v(" "),e("p",[t._v("通过Boolean()进行转化"),e("br"),t._v("\n转换规则:直观上为“空”的值（如 "),e("code",[t._v("0")]),t._v("、空字符串、"),e("code",[t._v("null")]),t._v("、"),e("code",[t._v("undefined")]),t._v(" 和 "),e("code",[t._v("NaN")]),t._v("）将变为 "),e("code",[t._v("false")]),t._v(",其他值变成 "),e("code",[t._v("true")]),e("br"),t._v("\n注:"),e("code",[t._v('"0" "false" " "')]),t._v("都为"),e("code",[t._v("true")])]),t._v(" "),e("h2",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),e("p",[t._v("JavaScript 支持以下运算符:")]),t._v(" "),e("h3",{attrs:{id:"算数运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符"}},[t._v("#")]),t._v(" 算数运算符")]),t._v(" "),e("p",[t._v("常规的："),e("code",[t._v("+ - * /")]),t._v("（加减乘除），取余运算符 "),e("code",[t._v("%")]),t._v("和幂运算符 "),e("code",[t._v("**")]),e("br"),t._v("\n一元运算符还有一些特殊的功能例如"),e("code",[t._v("+")]),t._v("可以作用字符串的拼接,-可以进行number类型的正负转化")]),t._v(" "),e("h3",{attrs:{id:"三元运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[t._v("#")]),t._v(" 三元运算符")]),t._v(" "),e("p",[t._v("唯一具有三个参数的操作：cond ? resultA : resultB。如果 cond 为真，则返回 resultA，否则返回 resultB。")]),t._v(" "),e("h3",{attrs:{id:"逻辑运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),e("p",[t._v("逻辑与"),e("code",[t._v("&&")]),t._v("(同真则则真,有假则假)"),e("br"),t._v("\n若第一个运算结果为"),e("code",[t._v("false")]),t._v("代表整个表达式结果,则停止运算,返回为"),e("code",[t._v("fals")]),t._v("e的表达式"),e("br"),t._v("\n若同真则返回最后为真的那个表达式")]),t._v(" "),e("p",[t._v("逻辑或(有真则真,同假则假)\n逻辑或会返回第一个为真值的表达式结果\n若都为"),e("code",[t._v("false")]),t._v("返回最后一次"),e("code",[t._v("false")]),t._v("的值")]),t._v(" "),e("p",[t._v("逻辑非 "),e("code",[t._v("!")]),t._v(" 将操作数转换为布尔值并返回其相反的值。")]),t._v(" "),e("p",[t._v("逻辑与 "),e("code",[t._v("&&")]),t._v(" 和或 "),e("code",[t._v("||")]),t._v(" 执行短路运算，然后返回运算停止处的值。")]),t._v(" "),e("h3",{attrs:{id:"空值合并运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空值合并运算符"}},[t._v("#")]),t._v(" 空值合并运算符")]),t._v(" "),e("p",[e("code",[t._v("??")]),t._v(" 运算符从一列变量中，选取值为已定义的值（defined value）的变量。a ?? b 的结果是 a，除非 a 为 null/undefined，这时结果是 b。")]),t._v(" "),e("h3",{attrs:{id:"逗号运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符"}},[t._v("#")]),t._v(" 逗号运算符")]),t._v(" "),e("p",[t._v("逗号运算符会返回最后一个式子的结果进行赋值,因为运算优先级比一般都运算符都要低,所以需要括号引起来")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此处a为20")]),t._v("\n")])])]),e("h3",{attrs:{id:"比较运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),e("p",[t._v("运算符"),e("code",[t._v("==")]),t._v("会将不同类型的值转换为数字,除了"),e("code",[t._v("null")]),t._v("与"),e("code",[t._v("undefined")]),t._v("它们彼此相等而没有其他情况\n运算符"),e("code",[t._v("===")]),t._v("除了校验值以外还会校验数据类型,("),e("code",[t._v("null")]),t._v("与"),e("code",[t._v("undefined")]),t._v("在此情况下也是不相等的)")])])}),[],!1,null,null,null);a.default=_.exports}}]);